webpackJsonp([27],{HQfV:function(e,t,n){"use strict";var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("article",[n("p"),n("title",[e._v(" The prototype implementation of Joy ")]),e._v("\n    The prototype implementation of Joy\n  "),n("p"),e._m(0),n("p"),n("p",[e._v("\n    Revised March 2003\n  ")]),n("p",[e._v("Contents\n  ")]),e._m(1),e._m(2),e._m(3),n("p",[e._v("\n    The prototype implementation of Joy is written in unadorned C. It is not the first implementation, earlier ones\n    have been written in Pascal, Prolog and Lisp. A small version in C was written by a group of students. The current\n    prototype bears almost no resemblance to these earlier versions.\n  ")]),n("p",[e._v('\n    This manual includes references to John Cowan\'s (2001) major extension to the earlier version of the prototype,\n    and also to some additions by Nick Forde. Their help has been invaluable, and it is a pleasure to acknowledge\n    their support. I am also grateful to many other members of the "concatenative" mailing group for finding and\n    fixing numerous bugs.\n  ')]),n("p",[e._v("\n    The source files for the current implementation are freely available, and can be downloaded in various formats\n    by following links from the main page.\n  ")]),e._m(4),e._m(5),e._m(6),e._m(7),e._m(8),n("pre",[e._v("        $  show  time\n          $  directory\n          $  edit  myfile.joy\n  ")]),e._v("\n  Under Unix the corresponding uses are:\n  "),n("br"),n("pre",[e._v("        $  date\n          $  ls\n          $  vi  myfile.joy\n  ")]),e._v("\n  When the request has been processed, control returns to the Joy system.\n  "),n("p",[e._v("\n    Lines not beginning with the escape character are processed by the Joy system. There are two styles of comments:\n    parenthesis style and end-of-line style. The first kind of comments are enclosed in starred parentheses,\n    "),n("kbd",[e._v("(*")]),e._v(" and\n    "),n("kbdd",[e._v("*)"),n("kbd",[e._v(",\n      they may continue over several lines:\n      "),n("br")])])],1),n("pre",[e._v("        (*  this is a comment\n              continued on the second line *)\n  ")]),e._v("\n  The second kind of comments occur after the hash-symbol\n  "),n("kb",[e._v("\n    # up to the end of line; no terminator is required:\n    "),n("br"),n("pre",[e._v("            # this comment terminates at the end of this line\n           \n              # and this comment terminates here\n  ")]),e._v("\n    Comments are not further processed but are treated just like blank space.\n    "),n("p",[e._v("\n      An input line consists of a number of "),n("em",[e._v("token")]),e._v("s. Some of these are single characters, the "),n("em",[e._v("reserved character")]),e._v("s.\n      They are the two (square) brackets "),n("kbd",[e._v(" [ ")]),e._v(" and "),n("kbd",[e._v(" ] ")]),e._v(", the two (curly) braces "),n("kbd",[e._v("{")]),e._v(" and\n      "),n("kbd",[e._v("}")]),e._v(", the semicolon "),n("kbd",[e._v(" ; ")]),e._v(" and the period"),n("kbd",[e._v(" . ")]),e._v(":\n      "),n("br")]),n("pre",[e._v('    reserved-character  ::=\n              "["  |  "]"  |  "{"  |  "}"  |  ";"  |  "."\n  ')]),n("p",[e._v("\n      Another kind of token is that of "),n("em",[e._v("integer constant")]),e._v(", a string of one or more decimal digits "),n("kbd",[e._v('"0"')]),e._v("    .. "),n("kbd",[e._v('"9"')]),e._v(" possibly immediately preceded by a unary minus "),n("kbd",[e._v('"-"')]),e._v(".\n      "),n("br")]),n("pre",[e._v('    integer-constant  ::=\n              [ "-" ]  ( "0" | "1" .. | "9" )  { "0" | "1" .. | "9" }\n  ')]),e._v("\n    An integer constant can contain up to 10 digits but must not exceed the platform dependent maximum integer\n    (generally $2^{32}-1$).\n    "),n("p",[e._v('\n      Apart from integers, the current implementation of Joy also has real numbers or "floats". In the simplest form\n      a '),n("em",[e._v("float constant")]),e._v(" consists of a string of one or more decimal digits, then a "),n("em",[e._v("decimal point . ")]),e._v('    and then at least one more decimal digit or possibly more. As for integer constants, a float constant can optionally\n      be preceded by a unary minus. For scientific notation, a float constant can be followed by a scale factor,\n      either of the letters "e" or "E" followed by one or more digits.\n    ')]),n("p",[e._v('\n      Instead of writing integers or floats in decimal notation, they can be preceded by "0" to signify octal notation\n      (using digits "0" .. "7"), or preceded by "0x" pr "0X" to signify hexadecimal notation (using digits "0" ..\n      "9" "A" .. "F").\n    ')]),n("p",[e._v("\n      Others tokens are "),n("em",[e._v("string constant")]),e._v("s and "),n("em",[e._v("character constant")]),e._v("s. Some character sequences beginning\n      with the backslash "),n("kbd",[e._v('"\\"')]),e._v(" character inside string constants or character constants are treated as\n      "),n("em",[e._v("escaped character")]),e._v("s. A character other than the backslash character is an ordinary character.\n      "),n("br")]),n("pre",[e._v('    escaped-character  ::=\n                 "\\n"                     newline\n              |  "\\t"                     tab\n              |  "\\b"                     backspace\n              |  "\\r"                     carriage return\n              |  "\\f"                     formfeed\n              |  "\\\'"                     single quote\n              |  "\\""                     double quote\n              |  "\\ddd"                   ASCII whose value is ddd\n                                          where ddd are three decimal digits\n      ordinary-character  ::=\n              any character except "\\"\n  ')]),e._v("\n    A "),n("em",[e._v("string constant")]),e._v(" begins and ends with the double quote character "),n("kbd",[e._v('"')]),e._v(", enclosing any sequence\n    of zero or more special characters or ordinary characters. A "),n("em",[e._v("character constant")]),e._v(" begins with the single\n    quote character "),n("kbd",[e._v("'")]),e._v(" followed by a special character or an ordinary character; there is no closing single\n    quote.\n    "),n("br"),n("pre",[e._v("    string-constant  ::=\n              '\"'  { escaped-character | ordinary-character } '\"'\n      character-constant  ::=\n              \"'\"  ( escaped-character | ordinary-character )\n  ")]),n("p",[e._v("\n      Of the remaining tokens some are the "),n("em",[e._v("reserved symbol")]),e._v("s:\n      "),n("br")]),n("pre",[e._v('    reserved-word  ::=\n        "=="  |  "MODULE"  |  "PRIVATE"  |  "PUBLIC"  |  "END"\n                                 |  "HIDE"     |  "IN"\n                                               |  "DEFINE"\n                                               |  "LIBRA"   \n  ')]),e._v('\n    The reserved words "HIDE", "IN", "DEFINE" and "LIBRA" are currently synonyms for "PRIVATE" and "PUBLIC",\n    and they may eventually declared obsolescent.\n    '),n("p",[e._v("\n      Any other token beginning with a printing character and possibly continuing with upper or lower case letters, digits\n      or the three characters "),n("kbd",[e._v('"="')]),e._v(", "),n("kbd",[e._v('"_"')]),e._v(" or "),n("kbd",[e._v('"-"')]),e._v(" is an "),n("em",[e._v("atomic symbol")]),e._v(".\n      "),n("br")]),n("pre",[e._v('    atomic-symbol  ::=\n          any printing character which is not a reserved character\n              or a digit or the single or double quote character\n          { letter  |  digit  |  "="  |  "_"  |  "-" }\n  ')]),n("p",[e._v("\n      To summarise, here is the definition of "),n("em",[e._v("token")]),e._v("s:\n      "),n("br")]),n("pre",[e._v("    token  ::=\n            reserved-character | reserved-word\n    | integer-constant | float-constant\n    | character-constant |  string-constant\n    | atomic-symbol\n  ")]),n("a",{attrs:{name:"TOC_3"}},[n("h2",[n("strong",[e._v("Factors and terms")])])]),n("p",[e._v("\n      Individual tokens are used to built up two kinds of syntactic entities called "),n("em",[e._v("factor")]),e._v("s and "),n("em",[e._v("term")]),e._v("s.\n      Their definitions are mutually recursive.\n    ")]),n("p",[e._v("\n      A "),n("em",[e._v("factor")]),e._v(" can be a single token such as an atom or one of the three constants: integer constant, character\n      constant or string constant. A factor can also consists of a (possibly empty) sequence of integer or character\n      constants enclosed in the curly brace tokens "),n("kbd",[e._v("{")]),e._v(" and "),n("kbd",[e._v("}")]),e._v(". Finally, a factor can also be a\n      (possibly empty) term enclosed in the square bracket tokens\n      "),n("kbd",[e._v("[")]),e._v(" and "),n("kbd"),e._v("}.\n      "),n("br")]),n("pre",[e._v('    factor  ::=\n             atomic-symbol\n          |  integer-constant | float-constant\n          |  character-constant | string-constant\n          |  "{"  { character-constant | integer-constant } "}"\n          |  "["  term  "]"\n  ')]),e._v("\n    A "),n("em",[e._v("term")]),e._v(" consists of zero or more factors.\n    "),n("br"),n("pre",[e._v("    term  ::=\n          { factor }\n  ")]),n("p",[e._v("\n      For the "),n("em",[e._v("semantics")]),e._v(" another classification is essential. Factors are either "),n("em",[e._v("literal")]),e._v("s or "),n("em",[e._v("operator")]),e._v("s\n      or "),n("em",[e._v("combinator")]),e._v("s. A literal can be one of the two atomic symbols\n      "),n("kbd",[e._v('"true"')]),e._v(" or "),n("kbd",[e._v('"false"')]),e._v(" -- these are the logical literals. A literal can also be one of the\n      four constants and these are then called\n      "),n("em",[e._v("integer literal")]),e._v(",\n      "),n("em",[e._v("float literal")]),e._v(", "),n("em",[e._v("character literal")]),e._v(" or "),n("em",[e._v("string literal")]),e._v(". A literal can also consist of\n      the braces enclosing characters or integers - these are the "),n("em",[e._v("set literals")]),e._v(". Finally a literal can consist\n      of the brackets enclosing a term - these are the "),n("em",[e._v("quotation literals")]),e._v(" or simply "),n("em",[e._v("quotations")]),e._v(".\n      If the term consists just of literals, the factor is called a "),n("em",[e._v("list list")]),e._v(" or just a "),n("em",[e._v("list")]),e._v(".\n      "),n("br")]),n("pre",[e._v('    literal  ::=\n             "true"  |  "false"\n    |  integer-constant | float-constant\n    |  character-constant | string-constant\n          |  "{"  { character-constant | integer-constant } "}"\n          |  "["  term  "]"\n  ')]),e._v("\n    The other atomic factors are either built in or defined. All built in atomic factors are either operators\n    or combinators. Most defined atomic factors are likely also to be operators or combinators, but it is possible\n    to define atomic symbols which are literals.\n    "),n("p",[n("em",[e._v("factor")]),e._v("s and "),n("em",[e._v("term")]),e._v("s denote functions which take one argument and yield one value or result.\n      The argument and the result consist principally of a "),n("em",[e._v("stack of values")]),e._v(", but have as minor components\n      several "),n("em",[e._v("input file")]),e._v("s and one "),n("em",[e._v("output file")]),e._v(". The stack is normally a sequence of values of the\n      kind denoted by constants and thus it resembles a list. But in (rather rare) cases the stack can contain operators\n      or combinators. So the stack is essentially the same thing as a term. Most of the functions affect only the\n      stack component. An empty term denotes the identity function. A non-empty term, consisting of one or more factors\n      concatenated, denotes the composition of the functions denoted by the factors. The functions denoted by the\n      factors are applied in the order in which the factors are written.\n    ")]),n("p",[e._v("\n      All literal factors denote functions yielding as result a stack component which is like the argument stack except\n      that the value of the literal has been pushed on top of the stack. The operator factors expect as argument\n      a stack which has to contain one or more values. They denote functions yielding as a result another stack which\n      is like the argument stack except that the top few values have been replaced by others. The combinator factors\n      are like the operator factors in that they expect a stack containing certain values. Specifically, the combinator\n      factors expect a stack containing one or more quotations and possibly some other values. Combinators will execute\n      the terms contained in the quotations.\n    ")]),n("p",[e._v("\n      The file\n      "),n("a",{attrs:{href:"joy/plain-manual.html"}},[e._v("\n      Online manual (raw Joy1) ")]),e._v(" gives a very synoptic explanation of the inbuilt primitives of "),n("em",[e._v("raw Joy1")]),e._v("    -- that is, excluding anything defined in one or the other library. The arrow "),n("kbd",[e._v("->")]),e._v(" indicates that\n      the operator or combinator that is being described expects on top of the stack the items on the left of the\n      arrow and returns a stack on top of which are the items on the right. The content of this file is identical\n      in content with that obtained by the "),n("kbd",[e._v("manual")]),e._v(" command.\n      "),n("a",{attrs:{name:"TOC_4"}})]),n("h2",[n("a",{attrs:{name:"TOC_4"}},[n("strong",[e._v("Definitions and the main cycle")])])]),e._v("\n    Joy programs can be written using only the inbuilt atomic symbols, but it also possible to define new symbols.\n    There are several kinds of reason why one might want to define new symbols: because they are needed in various\n    places in the program, because they involve recursion or because they make the program more intelligible. The\n    first two reasons are less compelling in Joy than in most other languages.\n    "),n("p",[e._v("\n      Often one needs not just one "),n("em",[e._v("definition")]),e._v(" but a "),n("em",[e._v("sequence")]),e._v(' of definitions, and these are then\n      separated by semicolons "'),n("kbd",[e._v(";")]),e._v('".\n      '),n("br")]),n("pre",[e._v('    definition-sequence  ::=\n          definition  { ";"  definition }\n  ')]),n("p",[e._v("\n      Definitions can be of two kinds: simple or compound. A "),n("em",[e._v("simple definition ")]),e._v("consists of a user-chosen\n      atomic symbol followed by the "),n("kbd",[e._v("==")]),e._v(" token followed by a term:\n      "),n("br")]),n("pre",[e._v('    simple-definition  ::=\n            atomic-symbol  "=="  term\n  ')]),e._v("\n    A "),n("em",[e._v("simple definition")]),e._v(" introduces the new atomic symbol into the current working dictionary. The initial\n    dictionary is empty. After the definition the new symbol can be used, and if executed its effect is that of executing\n    the term.\n    "),n("p",[e._v("\n      A "),n("em",[e._v("compound definition")]),e._v(" consists of 1) optionally the "),n("kbd",[e._v("MODULE")]),e._v(" token followed by an atomic\n      symbol, then 2) optionally either the "),n("kbd",[e._v("PRIVATE")]),e._v(" token followed by a definition sequence, then 3) optionally\n      the "),n("kbd",[e._v("PUBLIC")]),e._v(' token followed by a definition sequence, and finally either the "'),n("kbd",[e._v(".")]),e._v('" (period)\n      token or the '),n("kbd",[e._v("END")]),e._v(" token. At least one of the three options must be present:\n      "),n("br")]),n("pre",[e._v('    compound-definition  ::=\n    [ "MODULE"  atomic-symbol ]\n    [ "PRIVATE"  definition-sequence ]\n    [ "PUBLIC"  definition sequence ]\n    ( "." | "END" )\n  ')]),e._v("\n    Instead of "),n("kbd",[e._v("PRIVATE...PUBLIC...")]),e._v(" the combination\n    "),n("kbd",[e._v("HIDE...IN...")]),e._v(" can be used, and instead of "),n("kbd",[e._v("PUBLIC...")]),e._v(" the syntax "),n("kbd",[e._v("LIBRA...")]),e._v(" or\n    "),n("kbd",[e._v("DEFINE...")]),e._v(" can be used. These alternative symbols may become obsolscent in the future, but will be\n    supported for the time being.\n    "),n("p",[e._v("\n      In the simplest case only the "),n("kbd",[e._v("PUBLIC")]),e._v("-part is present. In that case all "),n("em",[e._v("definition")]),e._v("s in the\n      "),n("em",[e._v("definition sequence")]),e._v(" are entered into the symbol table. If there is a "),n("kbd",[e._v("PRIVATE")]),e._v("-part, then\n      any "),n("em",[e._v("definition")]),e._v("s in its "),n("em",[e._v("definition sequence")]),e._v(" are entered into the symbol tableand are then\n      available for use by the "),n("kbd",[e._v("PUBLIC")]),e._v("-part. However, the "),n("kbd",[e._v("PRIVATE"),n("kbd",[n("em",[e._v("definition")]),e._v("s are\n      then obscured at the end of the "),n("kbd",[e._v("PUBLIC")]),n("em",[e._v("definition sequence")]),e._v(" and are then not available any further. If there is a "),n("kbd",[e._v("MODULE")]),e._v("-part,\n      then all subsequent "),n("kbd",[e._v("PRIVATE")]),e._v(" and "),n("kbd",[e._v("PUBLIC")]),n("em",[e._v("definition")]),e._v(" are visible as before except that at the end of the "),n("kbd",[e._v("PUBLIC")]),n("em",[e._v("definition sequence")]),e._v("    all "),n("em",[e._v("definition")]),e._v("s are obscured except the name of the module. In that case the "),n("em",[e._v("definition")]),e._v("s\n      of the "),n("kbd",[e._v("PUBLIC")]),e._v('-part can only be accessed as factors by what is called "qualified access", in the\n      form\n      '),n("br")])])]),n("pre",[e._v(" m . f   or   m.f\n  ")]),e._v("\n    where "),n("kbd",[e._v("m")]),e._v(" and "),n("kbd",[e._v("f")]),e._v(" are respectively the name of the module and of a function from its "),n("kbd",[e._v("PUBLIC")]),e._v("-part.\n    "),n("p",[e._v("\n      In many uses of Joy the initial input will be from the terminal keyboard and the output will be to the terminal\n      screen. Operating systems will generally allow the input and the output to be redirected, so that the input\n      comes from a disk file or the output goes to a disk file, or both. Whatever the actual input file is, it will\n      consist of a a number of requests to the Joy system. A request is either a compound "),n("em",[e._v("definition")]),e._v("    or it is a term followed by either the "),n("kbd",[e._v("END")]),e._v(' token or just a period "'),n("kbd",[e._v(".")]),e._v('".\n      '),n("br")]),n("pre",[e._v('    cycle  ==\n          {    compound-definition\n      |  term  ( "END" | "." ) }\n  ')]),e._v("\n    In the first case the compound "),n("em",[e._v("definition")]),e._v(" is processed and control returns to the top level. In\n    the second case the term is executed on the current stack. In the default mode the top value on the stack is\n    then written the output file, normally the screen. If several terms are executed in succession, each term inherits\n    from the preceding term the remainder of the stack. This can be useful when debugging larger programs. On the\n    other hand, every library declaration clears the stack. The inbuilt factor "),n("kbd",[e._v("abort")]),e._v(" returns to the main\n    cycle, but it leaves the stack intact.\n    "),n("a",{attrs:{name:"TOC_5"}},[n("h2",[n("strong",[e._v("Initiating a Joy session")])])]),e._v("\n    A session with Joy is initiated by running\n    the Joy interpreter in whatever ways the installation allows or requires. In most cases this will be done from\n    the top level of the command language. In Unix it might simply be\n    "),n("br"),n("pre",[e._v(" $  joy\n  ")]),e._v("\n    and under VMS it might be\n    "),n("br"),n("pre",[e._v(" $  RUN JOY\n  ")]),e._v('\n    or, if "JOY" has been appropriately defined as a symbol,\n    '),n("br"),n("pre",[e._v(" $  JOY\n  ")]),e._v("\n    The Joy interpreter will then announce itself with a brief banner. In the simplest case the Joy interpreter\n    will then use the keyboard as the first input device and start the main cycle by taking input from there. Output\n    will be to the screen.\n    "),n("p",[e._v('\n      However, although this is the simplest case, it is not the most common. If the current directory contains a file\n      by the name "'),n("kbd",[e._v("usrlib.joy")]),e._v('", this will become the first input file, and the main cycle will start\n      reading requests from there. Typically this file will contain some '),n("em",[e._v("definition")]),e._v("s specific to the particular\n      user, or to the particular installation, or to the particular operating system. Typically this file will also\n      contain a directive to continue by reading some of the standard libraries, or to continue with some other files.\n      When these requests have been serviced, the main cycle will continue by reading inputs from the keyboard, unless\n      the main cycle has been terminated before that happens.\n    ")]),n("p",[e._v('\n      Most operating systems allow input to and output from a program to be "redirected" to come not from the keyboard\n      or go to the screen, but to come from and go to a file. In Unix the Joy interpreter can be run with the input\n      redirected from a file, say "'),n("kbd",[e._v("my-input.joy")]),e._v('", like this:\n      '),n("br")]),n("pre",[e._v(" $  joy  <my-input.joy\n  ")]),e._v('\n    It is also possible to redirect the output to go to, say "'),n("kbd",[e._v("my-output.txt")]),e._v('", like this:\n    '),n("br"),n("pre",[e._v(" $  joy  <my-input.joy  >my-output.txt\n  ")]),e._v("\n    The same can also be done in VMS, but here it is necessary that both redirections occur:\n    "),n("br"),n("pre",[e._v(" $  JOY /INPUT=MY-INPUT.JOY  /OUTPUT=MY-OUTPUT.TXt\n  ")]),e._v('\n    With redirection of the input the behaviour of the Joy interpreter again depends on whether the current\n    directory contains a file "\n    '),n("kbd",[e._v("usrlib.joy")]),e._v('". If there is such file, then that is read first, and only then the main cycle reads not\n    from the keyboard but from the redirected file. If there is no file "'),n("kbd",[e._v("usrlib.joy")]),e._v('", the main cycle will\n    immediately read from the redirected file.\n    '),n("p",[e._v("\n      Under some operating systems it is possible to give what are called command line arguments to a program that is\n      to run. This is very familiar under Unix, where the Joy interpreter might be run like this:\n      "),n("br")]),n("pre",[e._v(" $  joy  P1  P2  P3\n  ")]),e._v('\n    with in this case three arguments P1 P2 P3. Under VMS it is also possible to define programs as "foreign\n    commands" by a '),n("em",[e._v("definition")]),e._v(" (possibly in "),n("kbd",[e._v("login.com")]),e._v("):\n    "),n("br"),n("pre",[e._v(' $  JOY == "$DSK-XYZ[MYNAME.JOYDIR]JOY.EXE"\n  ')]),e._v("\n    where "),n("kbd",[e._v("DSK-XYZ")]),e._v(", "),n("kbd",[e._v("MYNAME")]),e._v(" and "),n("kbd",[e._v("JOYDIR")]),e._v(" are respectively the user's disk, the\n    user's name and the directory on which the executable interpreter is located. The joy interpreter is then run\n    with parameters P1 P2 P3 by\n    "),n("br"),n("pre",[e._v(" $  JOY  P1  P2  P3\n  ")]),n("p",[e._v('\n      When the Joy interpreter is run with command line arguments, the first parameter P1 must be a valid file name.\n      The interpreter then attempts to open that file for reading, and if that attempt fails it exits. If the attempt\n      succeeds, all further commands are taken not from standard input (possibly redirected) but from that file.\n      This means that any explicit input from the "get" command can still come from standard input.\n    ')]),n("p",[e._v("\n      When Joy is run with command line parameters, say by\n      "),n("br")]),n("pre",[e._v(" $  joy  test.joy  mary  42\n  ")]),e._v("\n    the number of parameters is available by the operator\n    "),n("kbd",[e._v("argc")]),e._v(' which pushes an "argument count", in this case 3. Also, a list of the parameters is available\n    by the operator\n    '),n("kbd",[e._v("argv")]),e._v(' which pushes the "argument vector", in this case the list '),n("kbd",[e._v('[ "test.joy"  "mary"  "42" ]')]),e._v(".\n    "),n("p",[e._v('\n      Under Unix and under VMS one can write files that are to be executed by the command interpreter and whose first\n      line calls Joy and uses the rest of the file s input to Joy. In Unix these are "here documents", for VMS they\n      are ".com" files. With the command line arguments to Joy there is another, more elegant, possibility using\n      the "#!" facility (interpreted by the Unix '),n("em",[e._v("exec")]),e._v(' system call). For Joy such a file would have to\n      start with "#!joy" as the first line, and the rest of the file as input to Joy. The file\n      '),n("a",{attrs:{href:"joy/gcd"}},[e._v("gcd")]),e._v(" is an example which uses Joy to compute the greatest common divisor. After it has\n      been created, it has to be made executable with \n    ")]),n("pre",[e._v("$ chmod +x gcd")]),e._v("\n    and thereafter it can be run\n    with command lines such as\n    "),n("pre",[e._v("$ gcd 45 100")]),e._v("\n    which will give the answer "),n("kbd",[e._v("5")]),e._v(".\n    "),n("a",{attrs:{name:"TOC_6"}},[n("h2",[n("strong",[e._v("Input and output")])])]),n("p",[e._v("\n      For many applications no explicit output operation is needed because in the default mode the main cycle will always\n      write the value of the top of stack to the output stream. But sometimes explicit output is useful. There are\n      two basic output operators: "),n("kbd",[e._v("put")]),e._v(" will remove a value of any type from the stack and write it\n      to the output stream.\n      "),n("kbd",[e._v("putch")]),e._v(" will remove a value of a numeric type (character or integer) and write it as a single ASCII\n      character to the output stream. Other useful output operations are defined in the library.\n    ")]),n("p",[e._v("\n      In the default mode the Joy system will write the value of the top of stack item to the output. The mode is under\n      the control of a flag with value 0 and 1. If the value is 0, no automatic output occurs. If the value is 1,\n      the default, output of the top value occurs after the evaluation of every term in the main cycle. If the value\n      is 2, the entire stack is output after such an evaluation. The value of this flag can be changed by the "),n("kbd",[e._v("setautoput")]),e._v("    operator, typical use is\n      "),n("br")]),n("pre",[e._v("        0  setautoput.\n  ")]),n("p",[e._v("\n      Most Joy programs operate on a stack, several input files and one output file. The initial input comes either from\n      the keyboard or it can be redirected to come from a diskfile, or it can be not from standard input but from\n      a file specified as a command line argument. Often it is useful to include other files, typically diskfiles,\n      in the input. Joy has an "),n("kbd",[e._v("include")]),e._v(" operator for this purpose. It takes a string on the stack as\n      a parameter and opens a file with that name and henceforth accepts input from there. A typical use might be\n      "),n("br")]),n("pre",[e._v('        "test.joy"  include.\n  ')]),e._v("\n    Included files can contain library "),n("em",[e._v("definition")]),e._v("s or "),n("em",[e._v("term")]),e._v("s to be executed. They can contain\n    other "),n("kbd",[e._v("include")]),e._v(" operators, up to a level of 10. When the end of an included file is reached, input reverts\n    to the previous file which contained the relevant "),n("kbd",[e._v("include")]),e._v(" operator. The include files therefore form\n    a stack.\n    "),n("p",[e._v('\n      Users will often want their own selection of systems or private libraries read in automatically when the system\n      starts up. For this purpose the Joy system always starts by checking whether a file "'),n("kbd",[e._v("usrlib.joy")]),e._v("\"\n      exists in the user's current directory. That file can be empty, but it can contain user specific "),n("em",[e._v("definition")]),e._v("s\n      and it can contain particular "),n("em",[e._v("term")]),e._v("s to be executed. One such "),n("em",[e._v("term")]),e._v(" might be a directive to\n      include yet another file, perhaps\n      "),n("br")]),n("pre",[e._v('        "inilib.joy"  include.\n  ')]),e._v("\n    which transfers input to the "),n("em",[e._v("initial library")]),e._v(", "),n("kbd",[e._v("inilib.joy")]),e._v(", one of the systems libraries\n    for Joy. These libraries are described in the next section.\n    "),n("p",[e._v("\n      If input does not come from the keyboard but from an include file, it is often useful to see the current input\n      on the screen. Normally the Joy system does not echo keyboard or other input on the screen or output file,\n      but it can be made to do so. Joy has an internal "),n("em",[e._v("echoflag")]),e._v(" with values 0, 1, 2 or 3.. The initial\n      default value is 0, and then no echo occurs. If the value is 1, then input lines are echoed to the output without\n      change. If the value is 2, then each line is preceded by a tab (ASCII 9) -- this can help to distinguish echoed\n      lines in the output from others. If the value is 3, then each tab is preceded by a line number specific to\n      the current input file. When input reverts to an earlier file, the earlier line numbering is resumed. The value\n      of the echo flag can be set by the operator "),n("kbd",[e._v("setecho")]),e._v(". Typically the value will be set by something\n      like\n      "),n("br")]),n("pre",[e._v("        2  setecho.\n  ")]),n("a",{attrs:{name:"TOC_7"}},[n("h2",[n("strong",[e._v("Error messages")])])]),n("p",[e._v("\n      When a Joy program is processed, two kinds of programming errors can occur. The first kind can occur during reading\n      of the input file. Because the syntax of Joy is so simple, there are only few possibilities for error. The\n      second kind can occur at runtime when a term is being executed. These errors concern incorrect parameters for\n      operators and combinators. Because there are many kinds of operators and combinators, the possibilities for\n      runtime errors are great.\n    ")]),n("p",[e._v("\n      Errors of the first kind occur during reading a program. Since the input line is still available at that time,\n      it is possible for the error message to point to the exact place at which the error occurred. If input comes\n      from the initial input file, most likely the terminal, it is not repeated. In other case it is repeated, including\n      its line number. The next line then consists just of an up-arrow "),n("kbd",[e._v('"^"')]),e._v(" pointing to the error position.\n      Following that is a line containing the specific error message.\n    ")]),n("p",[e._v("\n      The following (rare) message can be reported when reading tokens, it occurs when the second or third digit in an\n      escaped character is missing.\n      "),n("br")]),n("pre",[e._v("        digit expected\n  ")]),e._v("\n    The following errors can occur when reading factors:\n    "),n("br"),n("pre",[e._v("        numeric expected in set\n          ']' expected\n          a factor cannot begin with this symbol\n  ")]),e._v("\n    The following errors can occur when reading "),n("kbd",[e._v("HIDE")]),e._v(" declarations:\n    "),n("br"),n("pre",[e._v("        IN expected in HIDE-definition\n          END expected in HIDE-definition\n  ")]),e._v("\n    The following errors can occur when reading "),n("em",[e._v("definition")]),e._v("s:\n    "),n("br"),n("pre",[e._v("        atom expected at start of "),n("em",[e._v("definition")]),e._v("\n          == expected in "),n("em",[e._v("definition")]),e._v("\n  ")]),n("p",[e._v("\n      All other errors are "),n("em",[e._v("runtime error")]),e._v("s. These are given in the form:\n      "),n("br")]),n("pre",[e._v('    "run time error: "  MESSAGE  " needed for "  NAME\n  ')]),e._v("\n    Two examples are\n    "),n("br"),n("pre",[e._v("    run time error: fewer include files needed for include\n      run time error: valid file name needed for include\n  ")]),e._v("\n    In general, the "),n("kbd",[e._v("NAME")]),e._v(" is the name of the operator or combinator whose execution was attempted\n    but failed. The "),n("kbd",[e._v("MESSAGE")]),e._v(" is often the same for many operators or combinators. It can be one of the\n    following:\n    "),n("br"),n("pre",[e._v("        one parameter\n          two parameters\n          three parameters\n          four parameters\n          four parameters\n          quotation as top parameter\n          quotation as second parameter\n          quotation as third parameter\n          quotation as fourth parameter\n          two parameters of the same type\n          integer\n          two integers\n          numeric\n          numeric second parameter\n          non-zero operand\n          list\n          list as second parameter\n          user defined symbol\n          internal list\n          small numeric\n          non-empty set\n          non-empty string\n          non-empty list\n          smaller index\n          aggregate parameter\n          different type\n  ")]),n("p",[e._v("\n      Some apparently inexplicable runtime errors can occur when reading an included library file which is syntactically\n      correct and hence does not produce an error message as it is read in. The program can still contain a logical\n      error which causes something unintended to be executed that produces a run time error. In that case it is helpful\n      to use "),n("kbd",[e._v("setecho")]),e._v(" to set the echoflag to "),n("kbd",[e._v("3")]),e._v(", resulting in line numbers to be printed\n      as the included file is read in. There have been two occasions where this trick helped clear up a problem.\n      "),n("a",{attrs:{name:"TOC_8"}})]),n("h2",[n("a",{attrs:{name:"TOC_8"}},[n("strong",[e._v("The libraries")])])]),n("p",[e._v("\n      The Joy system has a growing number of library files containing definitions which extend the core Joy language.\n      he following is a brief description of the various libraries in the current distribution. The actual content\n      of all the libraries is still subject to minor change, so these descriptions should only be taken to be a rough\n      guide.\n    ")]),n("p",[e._v("\n      The first two libraries below are very atypical: the first because it does not even have to exist at all, the second\n      because it is assumed by just about all other libraries and hence is quite non-specific.\n    ")]),n("p"),n("dl",[n("dt",[n("a",{attrs:{href:"joy/usrlib.joy"}},[e._v("usrlib.joy")]),n("br")]),n("dd",[n("p",[e._v("This "),n("em",[e._v("user library")]),e._v(" is intended to be just an example of what a personalised file "),n("kbd",[e._v("usrlib.joy")]),e._v("        might look like. When Joy is run with input coming from the "),n("em",[e._v("standard input stream")]),e._v(", on startup\n          Joy will first determine whether there is a file\n          "),n("kbd",[e._v("usrlib.joy")]),e._v(" in the current directory. If there is, it is opened for reading. When the end is\n          reached, or when there is no such file, the terminal or the designated inpu file is used. For any particular\n          user this file might look very different -- it might be empty, or it might might contain just a directive\n          to include the library described next, or it might contain fewer or it might contain more definitions,\n          or it might contain definitions of a very different kind.\n        ")])]),n("dt",[n("a",{attrs:{href:"joy/inilib.joy"}},[e._v("inilib.joy")]),n("br")]),n("dd",[n("p",[e._v("This "),n("em",[e._v("initial library")]),e._v(" contains a disparate collection of operators and combinators that are widely\n          useful. Most are not dependent on particular types. Some of them might eventually be incorporated as primitives\n          into the Joy language. Currently there are a few simple operators to help with explicit input and output,\n          some operators for dates and times, some operators on predicates, and some useful combinators. Finally\n          there are some utilities to help loading and managing libraries. All other libraries wiil ensure either\n          directly or indirectly that this library is also loaded.\n        ")])])]),n("p",[e._v("The following "),n("em",[e._v("basic libraries")]),e._v(" contain definitions of still rather general operators and combinators\n      but related to specific types or groups of types.\n    ")]),n("dl",[n("dt",[n("a",{attrs:{href:"joy/agglib.joy"}},[e._v("agglib.joy")]),n("br")]),n("dd",[n("p",[e._v("This "),n("em",[e._v("aggregate library")]),e._v(" contains definitions of operators and combinators most of which are applicable\n          to all of the three "),n("em",[e._v("aggregate")]),e._v(" datatypes such as\n          "),n("em",[e._v("list")]),e._v("s, "),n("em",[e._v("string")]),e._v("s and "),n("em",[e._v("set")]),e._v("s. (Note that the next library seqlib.joy is specifically\n          for sequence datatypes such as lists and strings.)\n        ")]),n("p",[e._v('The agglib.joy library contains definitions of several unary and binary operators for building special cases\n          of these datatypes, and for accessing parts of these datatypes. There are also some ("dipped") variants\n          which operate not on the top of the stack but one below. The combinators in this library are mainly for\n          traversing these datatypes. (At the end there are a few definitions of statistical operators, but in the\n          future these might be moved to a more extensive statistics library.)\n        ')])]),n("dt",[n("a",{attrs:{href:"joy/seqlib.joy"}},[e._v("seqlib.joy")]),n("br")]),n("dd",[e._v("\n        This "),n("em",[e._v("sequence library>")]),e._v(" contains definitions of functions specific to the "),n("em",[e._v("sequence datatypes")]),e._v("      such as lists and strings. When this library is loaded, it ensures that the "),n("kbd",[e._v("agglib.joy")]),e._v(" library\n        will also be loaded.\n        "),n("p",[e._v("This library contains definitions of functions for reversing lists or strings, for flattening lists of sequences,\n          for generating lists of various subsquences of sequences, sorting and merging of sequences and inserting\n          into and deleting from sequences. (At the end there are a few definitions of functions applicable to "),n("em",[e._v("tree")]),e._v("s\n          or recursive lists, but in the future these might be moved to a more extensive tree library.)\n        ")])]),n("dt",[n("a",{attrs:{href:"joy/numlib.joy"}},[e._v("numlib.joy")]),n("br")]),n("dd",[e._v("This "),n("em",[e._v("numerical library")]),e._v(" contains definitions of functions and combinators for numerical work on integers\n        and floating numbers. some convenience predicates such as positive, negative, odd, even and prime, some standard\n        functions such as factorial, fibonacchi, greatest common divisor and temperature conversion. Also included\n        are methods for finding roots of quadratic equations and Newton's method for finding solutions of equations\n        in one variable.\n      ")]),n("dt",[n("a",{attrs:{href:"joy/symlib.joy"}},[e._v("symlib.joy")]),n("br")]),n("dd",[e._v("This "),n("em",[e._v("symbolic library")]),e._v(" is for purely symbolic manipulation of various notations. Currently all the\n        definitions are for non-specific translations from one notation to another.\n        "),n("br"),e._v("There is a\n        "),n("a",{attrs:{href:"joy/symtst.joy"}},[e._v("symtst.joy")]),e._v(" test file and its\n        "),n("a",{attrs:{href:"joy/symtst.out"}},[e._v("symtst.out")]),e._v(" output. This library is currently used by the special libraries\n        "),n("kbd",[e._v("grmlib.joy")]),e._v(" and "),n("kbd",[e._v("plglib.joy")]),e._v(", see below.\n      ")])]),n("p",[e._v("\n      The followiing "),n("em",[e._v("special libraries")]),e._v(" contain definitions of operators and combinators that are very specific\n      to a particular field or problem.\n    ")]),n("dl",[n("dt",[n("a",{attrs:{href:"joy/mtrlib.joy"}},[e._v("mtrlib.joy")]),n("br")]),n("dd",[e._v("A library for "),n("em",[e._v("matrices")]),e._v(" and "),n("em",[e._v("vector")]),e._v(" manipulation. The vectors are implemented as Joy lists,\n        the matrices as lists of lists. Either may contain numeric or non-numeric elements.\n        "),n("br"),e._v("There is a\n        "),n("a",{attrs:{href:"joy/mtrtst.joy"}},[e._v("mtrtst.joy")]),e._v(" testfile and its\n        "),n("a",{attrs:{href:"joy/mtrtst.out"}},[e._v("mtrtst.out")]),e._v(" output.\n      ")]),n("dt",[n("a",{attrs:{href:"joy/tutlib.joy"}},[e._v("tutlib.joy")]),n("br")]),n("dd",[e._v("A library for writing "),n("em",[e._v("interactive sessions")]),e._v(" such as "),n("em",[e._v("tutorials")]),e._v(".\n        "),n("br"),e._v("Currently there is only one such tutorial (for Joy):\n        "),n("a",{attrs:{href:"joy/joytut.joy"}},[e._v("joytut.joy")]),n("br"),e._v(" There is a\n        "),n("a",{attrs:{href:"joy/joytut.com"}},[e._v("joytut.com")]),e._v(" (pseudo) input and its\n        "),n("a",{attrs:{href:"joy/joytut.out"}},[e._v("joytut.out")]),e._v(" output.\n      ")]),n("dt",[n("a",{attrs:{href:"joy/lazlib.joy"}},[e._v("lazlib.joy")]),n("br")]),n("dd",[e._v("A "),n("em",[e._v('"lazy list" library')]),e._v(", for unevaluated infinite or finite lists that will only be evaluated as needed.\n        "),n("br"),e._v(" There is a\n        "),n("a",{attrs:{href:"joy/laztst.joy"}},[e._v("laztst.joy")]),e._v(" test file and its\n        "),n("a",{attrs:{href:"joy/laztst.out"}},[e._v("laztst.out")]),e._v(" output.\n      ")]),n("dt",[n("a",{attrs:{href:"joy/lsplib.joy"}},[e._v("lsplib.joy")]),e._v(" and\n        "),n("a",{attrs:{href:"joy/lsplib.lsp"}},[e._v("lsplib.lsp")]),n("br")]),n("dd",[e._v("A small (eval-apply) Lisp interpreter in Joy, and a small library for this version of Lisp.\n        "),n("br"),e._v(" There is a\n        "),n("a",{attrs:{href:"joy/lsptst.joy"}},[e._v("lsptst.joy")]),e._v(" driver for the\n        "),n("a",{attrs:{href:"joy/lsptst.lsp"}},[e._v("lsptst.lsp")]),e._v(" lisp input and its\n        "),n("a",{attrs:{href:"joy/lsptst.out"}},[e._v("lsptst.out")]),e._v(" output.\n      ")]),n("dt",[n("a",{attrs:{href:"joy/plglib.joy"}},[e._v("plglib.joy")]),n("br")]),n("dd",[e._v("A library for "),n("em",[e._v("propositional logic")]),e._v(" using semantic tableaux for determining whether a formula is a tautology\n        (or for determining satisfiability). This library depends on (and loads) the\n        "),n("em",[e._v("symbolic library")]),n("kbd",[e._v("symlib.joy"),n("kbd",[e._v("."),n("br"),e._v("\n        There is a\n        "),n("a",{attrs:{href:"joy/plgtst.joy"}},[e._v("plgtst.joy")]),e._v("\n        file of test input and its\n        "),n("a",{attrs:{href:"joy/plgtst.out"}},[e._v("plgtst.out")]),e._v("\n        output.\n        ")])])]),n("dt",[n("a",{attrs:{href:"joy/grmlib.joy"}},[e._v("grmlib.joy")]),n("br")]),n("dd",[e._v("A "),n("em",[e._v("grammar library")]),e._v(" for regular expressions and context free grammars. Both parsing and generating are\n        supported. This library depends on (and loads) the\n        "),n("em",[e._v("symbolic library")]),n("kbd",[e._v("symlib.joy"),n("kbd",[e._v("."),n("br"),e._v("\n        There is a\n        "),n("a",{attrs:{href:"joy/grmtst.joy"}},[e._v("grmtst.joy")]),e._v("\n        test input and its\n        "),n("a",{attrs:{href:"joy/grmtst.out"}},[e._v("grmtst.out")]),e._v("\n        output.\n        ")])])])]),n("p",[e._v("\n      The file\n      "),n("a",{attrs:{href:"joy/allhelp.html"}},[e._v("allhelp.html")]),e._v(" is the output of the "),n("em",[e._v("help")]),e._v(" command when all libraries have\n      been loaded. It gives some impression of the size of the Joy implementation so far.\n    ")]),n("p",[e._v("\n      The file\n      "),n("a",{attrs:{href:"joy/joylibs.tar.gz"}},[e._v("joylibs.tar.gz")]),e._v(" is a gzipped tar file of all *.joy libraries, input test files\n      and output files. This file is automatically updated when there is any change to the Joy distribution.\n    ")]),n("p"),n("p",[e._v('\n      The following libraries are external to the main Joy web pages. They are part of the "files" folder for the "concatenative"\n      yahoo mailing group. To access them you need to join the group.\n    ')]),n("dl",[n("dt",[n("a",{attrs:{href:"http://www.groups.yahoo.com/group/concatenative/files/rabbit"}},[e._v("\n        rabbit")]),n("br")]),n("dd",[e._v("A Joy to HTML translation library by Heiko Kuhrt, it contains an extensive Joy manual in HTML format.\n      ")]),n("dt",[n("a",{attrs:{href:"http://www.groups.yahoo.com/group/concatenative/files/mandel.html"}},[e._v("\n        mandel")]),n("br")]),n("dd",[e._v("Several Mandelbrot programs in Joy by Nick Forde et. al. collected by Nick Forde.\n      ")])]),n("a",{attrs:{name:"TOC_9"}},[n("h2",[n("strong",[e._v("Miscellaneous features")])])]),n("p",[e._v("\n      Joy has a "),n("kbd",[e._v("help")]),e._v(" command to remind users of the names of currently defined symbols. The command does\n      not expect any parameters on the stack, and it does not affect the stack. The effect is to write all user defined\n      symbols and all inbuilt symbols to the output which is normally the screen. The list begins with the most recently\n      defined symbols, typically those specially defined just for the current run, then the library symbols and finally\n      the inbuilt symbols. The "),n("kbd",[e._v("help")]),e._v(" command is just a factor:\n      "),n("br")]),n("pre",[e._v("        help\n  ")]),n("p",[e._v("\n      More details about a particular symbol can be obtained by the "),n("kbd",[e._v("helpdetail")]),e._v(" operator. It expects a\n      list of atoms on the stack and gives a short message for each symbol. If the symbol is defined, then the message\n      consists of the "),n("em",[e._v("definition")]),e._v(" for the symbol. If the symbols is inbuilt, then the message consists of\n      a brief description of its usage.\n      "),n("br")]),n("pre",[e._v("        [ swap step product ]  helpdetail.\n  ")]),e._v("\n    asks for detailed help about the inbuilt operator "),n("kbd",[e._v("swap")]),e._v(", the inbuilt combinator "),n("kbd",[e._v("step")]),e._v("  and the defined operator "),n("kbd",[e._v("product")]),e._v(". The message is\n    "),n("br"),n("pre",[e._v("swap   :   X Y  ->  Y X\n    Interchanges X and Y on top of the stack.\n  step   :   A [P]  ->  ...\n    Pushing successive members of aggregate A onto stack, executes P for each.\n  product  ==\n    1  swap  [*]  step\n  ")]),e._v("\n    For the inbuilt primitives the "),n("kbd",[e._v("->")]),e._v(" arrow indicates the type of the symbol. To the left of the\n    arrow are the required parameters in ascending order. To the right of the arrow are the results, where possible.\n    If that cannot be specified in this simple notation, a dieresis "),n("kbd",[e._v("...")]),e._v(" is used.\n    "),n("p",[e._v("\n      As described in section 2, Joy already allows escapes to the operating system at the level of input lines. Another\n      such escape is at the level of Joy operators. The "),n("kbd",[e._v("system")]),e._v(" operator expects a string as a parameter\n      and passes that to the operating system. A typical use might be:\n      "),n("br")]),n("pre",[e._v('        "directory"  system\n  ')]),e._v("\n    The string parameter does not have to be pushed as a literal, it can equally well have been constructed.\n    For example, the "),n("kbd",[e._v("system")]),e._v(" operator can be used as in the following. My personal "),n("kbd",[e._v("USRLIB.JOY")]),e._v("  contains the "),n("em",[e._v("definition")]),n("br"),n("pre",[e._v('        editor  ==  "EDIT/TECO "\n  ')]),e._v("\n    The general "),n("kbd",[e._v("STDLIB.JOY")]),e._v(" file contains\n    "),n("br"),n("pre",[e._v("        edit  ==  dup editor swoncat system include\n  ")]),e._v("\n    Then, to edit and immediately read in a file, say "),n("kbd",[e._v("TEST.JOY")]),e._v(", I can use the Joy command\n    "),n("br"),n("pre",[e._v('        "TEST.JOY"  edit\n  ')]),e._v("\n    This calls the "),n("kbd",[e._v("edit")]),e._v(" operator to make a duplicate of the string "),n("kbd",[e._v('"TEST.JOY"')]),e._v(". One copy\n    is concatenated with the "),n("kbd",[e._v("editor")]),e._v(" string, and the result passed on to the system. That will call my\n    favourite editor to edit the file. When the editing is finished, the original string "),n("kbd",[e._v('"TEST.JOY"')]),e._v(" is\n    used to include the edited file. Note that other users might put a different name of their editor in their own\n    "),n("kbd",[e._v("USRLIB.JOY")]),e._v(". For example, Unix users would probably put\n    "),n("br"),n("pre",[e._v('        editor  ==  "vi "\n  ')]),e._v("\n    The "),n("em",[e._v("definition")]),e._v(" of "),n("kbd",[e._v("edit")]),e._v(" in "),n("kbd",[e._v("STDLIB.JOY")]),e._v(" remains unchanged.\n  ")])],1)};i._withStripped=!0;var r={render:i,staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("i",[this._v(" by Manfred von Thun ")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",[n("li",[n("a",{attrs:{href:"#TOC_1"}},[e._v("Introduction")])]),n("li",[n("a",{attrs:{href:"#TOC_2"}},[e._v("Tokens")])]),n("li",[n("a",{attrs:{href:"#TOC_3"}},[e._v("Factors and terms")])]),n("li",[n("a",{attrs:{href:"#TOC_4"}},[e._v("Definitions and the main cycle")])]),n("li",[n("a",{attrs:{href:"#TOC_5"}},[e._v("Initiating a Joy session")])]),n("li",[n("a",{attrs:{href:"#TOC_6"}},[e._v("Input and output")])]),n("li",[n("a",{attrs:{href:"#TOC_7"}},[e._v("Error messages")])]),n("li",[n("a",{attrs:{href:"#TOC_8"}},[e._v("The libraries")])]),n("li",[n("a",{attrs:{href:"#TOC_9"}},[e._v("Miscellaneous features")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("em",[this._v(" Abstract ")]),this._v(" Joy is a functional programming language which is not based on the application of functions\n    to arguments but on the composition of functions. This paper serves as a manual for the current prototype implementation.\n    Other implementations might differ in some details.\n    "),t("a",{attrs:{name:"TOC_1"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",[t("a",{attrs:{name:"TOC_1"}},[t("strong",[this._v("Introduction")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n    In the next three sections the following (extended) "),n("em",[e._v(" BNF notation")]),e._v(" is used for the grammar: A "),n("em",[e._v(" BNF production")]),e._v("  consists of a "),n("em",[e._v(" BNF nonterminal")]),e._v(" followed by "),n("kbd",[e._v("::=")]),e._v(' (pronounced "can be"), followed by a BNF expression.\n    A '),n("em",[e._v(" BNF expression")]),e._v(" consists of one or more BNF terms separated by the alternation symbol\n    "),n("kbd",[e._v("|")]),e._v(' pronounced "or". A '),n("em",[e._v(" BNF term")]),e._v(" consists of one or more BNF factors concatenated. A "),n("em",[e._v(" BNF factor")]),e._v("  can be a non-terminal, or a "),n("em",[e._v(" BNF terminal")]),e._v(" enclosed in double quotes. It can also be an English phrase.\n    A BNF factor can also be a BNF expression enclosed in parentheses "),n("kbd",[e._v("()")]),e._v(" to override precedences, or in\n    curly braces "),n("kbd",[e._v("{}")]),e._v(" to indicate zero or more repetitions, or in square brackets "),n("kbd",[e._v("[]")]),e._v(" to indicate\n    options.\n  ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("\n    The remainder of this paper gives a provisional manual for the prototype implementation. The focus of this manual\n    is on general structure, and it leaves out many details that have been described elsewhere. Also, the manual\n    should be understood to be provisional; other implementations of Joy might differ considerably. The first few\n    sections to follow describe the syntax and the general semantics of this implementation of Joy. The later sections\n    describe some very specific features that have not been covered elsewhere might not be present in other implementations.\n    "),t("a",{attrs:{name:"TOC_2"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",[t("a",{attrs:{name:"TOC_2"}},[t("strong",[this._v("Tokens")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("\n    This section describes the "),t("em",[this._v("lexicon")]),this._v(" of Joy, the individual "),t("em",[this._v("token")]),this._v("s which make up a program.\n  ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("\n    A Joy program consists of an ASCII file, which consists of lines of characters. Lines beginning with the escape\n    character "),t("kbd",[this._v("$")]),this._v(" are not processed by the Joy interpreter but are dispatched to the command shell. Under\n    VMS typical uses are the following:\n    "),t("br")])}]};t.a=r},kS4s:function(e,t,n){var i=n("pCuQ");"string"==typeof i&&(i=[[e.i,i,""]]),i.locals&&(e.exports=i.locals);n("rjj0")("1275df66",i,!1,{sourceMap:!1})},pCuQ:function(e,t,n){(e.exports=n("FZ+f")(!1)).push([e.i,"p[data-v-1209b73e]{margin-top:16px;margin-bottom:16px}hr[data-v-1209b73e]{margin-bottom:16px}pre[data-v-1209b73e]{margin-bottom:auto}code[data-v-1209b73e],kbd[data-v-1209b73e],pre[data-v-1209b73e]{font-family:Roboto Mono,monospace}",""])},v6C0:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n("HQfV"),r=!1;var o=function(e){r||n("kS4s")},a=n("VU/8")(null,i.a,!1,o,"data-v-1209b73e",null);a.options.__file="pages/papers-on-joy/the-current-implementation.vue",t.default=a.exports}});